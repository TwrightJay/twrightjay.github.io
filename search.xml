<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>GDB调试指南</title>
    <url>/2022/03/10/GDB%E8%B0%83%E8%AF%95%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<span id="more"></span> 

<h1 id="1-进程调试"><a href="#1-进程调试" class="headerlink" title="1. 进程调试"></a>1. 进程调试</h1><p>​        gdb -pid 1881(进程号)</p>
<p>​        b main.c:100(在main.c文件第一百行加断点)</p>
<p>​        c (执行监听断点)</p>
<p>​        bt(查看栈信息)</p>
<p>​        b(执行下一步)</p>
<p>​    </p>
<h1 id="2-coredump文件"><a href="#2-coredump文件" class="headerlink" title="2. coredump文件"></a>2. coredump文件</h1><p>​    <strong>打开coredump产生文件</strong></p>
<p>​        ulimit -c 1024</p>
<p>​        ulimit -a</p>
<p>​    调试coredump文件</p>
<p>​        gdb core-file /data/cipher_platform_ramdisk/rootfs/lic/core.9981</p>
<h1 id="3-已运行程序调试"><a href="#3-已运行程序调试" class="headerlink" title="3. 已运行程序调试"></a>3. 已运行程序调试</h1><p>​    ps命令找到进程id：</p>
<p>​        <code>$ ps -ef|grep 进程名</code></p>
<p>​    attach进程id</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">$ gdb</span><br><span class="line">(gdb) attach 20829</span><br></pre></td></tr></table></figure>

<p>​    直接调试相关进程ＩＤ</p>
<p>​    <code>gdb hello 20829  </code></p>
<p>​    或者</p>
<p>​    <code>gdb hello --pid 20829</code></p>
<h3 id="已运行程序没有调试信息"><a href="#已运行程序没有调试信息" class="headerlink" title="已运行程序没有调试信息"></a><strong>已运行程序没有调试信息</strong></h3><p>​    为了节省磁盘空间，已经运行的程序通常没有调试信息。但如果又不能停止当前程序重新启动调试，那怎么办呢？还有办法，那就是同样的代码，再编译出一个带调试信息的版本。然后使用和前面提到的方式操作。对于attach方式，在attach之前，使用file命令即可：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">$ gdb</span><br><span class="line">(gdb) file hello</span><br><span class="line">Reading symbols from hello...done.</span><br><span class="line">(gdb)attach 20829</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>c/c++</category>
      </categories>
      <tags>
        <tag>c/c++</tag>
      </tags>
  </entry>
  <entry>
    <title>移位运算</title>
    <url>/2022/05/18/%E7%A7%BB%E4%BD%8D%E8%BF%90%E7%AE%97/</url>
    <content><![CDATA[<span id="more"></span> 

<h3 id="1、一个32bit数据的位、字节读取操作"><a href="#1、一个32bit数据的位、字节读取操作" class="headerlink" title="1、一个32bit数据的位、字节读取操作"></a><strong>1、一个32bit数据的位、字节读取操作</strong></h3><p><strong>（1）获取单字节：</strong></p>
<p><img src="https://raw.githubusercontent.com/wenjunlichao1231/image_host/main/202205181958703.png" alt="微信截图_20220518185629"></p>
<p>示例：</p>
<p><img src="https://raw.githubusercontent.com/TwrightJay/twrightjay.github.io/main/v2-828faf67b00e1bdb7fecc724e22d5145_720w.jpg" alt="img"></p>
<p>​    结果：</p>
<p>​    <img src="https://pic2.zhimg.com/80/v2-61d8fa5303cafb63d04d7f4b6a7f04b1_720w.jpg?source=1940ef5c" alt="img">    </p>
<p><strong>（2）获取某一位：</strong></p>
<p><img src="https://raw.githubusercontent.com/wenjunlichao1231/image_host/main/202205182006273.png" alt="微信截图_20220518200404"></p>
<p>示例：</p>
<p><img src="https://pic1.zhimg.com/80/v2-fcca555c2cbb62b6a10b3ec5dbd4b6b9_720w.jpg?source=1940ef5c" alt="img"></p>
<p>结果：</p>
<p><img src="https://pic3.zhimg.com/80/v2-b866068057297b15c1d5f0de303858db_720w.jpg?source=1940ef5c" alt="img"></p>
<h3 id="2、一个32bit数据的位、字节清零操作"><a href="#2、一个32bit数据的位、字节清零操作" class="headerlink" title="2、一个32bit数据的位、字节清零操作"></a><strong>2、一个32bit数据的位、字节清零操作</strong></h3><p><strong>（1）清零某个字节：</strong></p>
<p><img src="https://raw.githubusercontent.com/wenjunlichao1231/image_host/main/202205182007164.png" alt="微信截图_20220518200721"></p>
<p>示例：</p>
<p><img src="https://pic3.zhimg.com/80/v2-38c63aa6596f616e84ed77911f4d5743_720w.jpg?source=1940ef5c" alt="img"></p>
<p>结果：</p>
<p><img src="https://pic2.zhimg.com/80/v2-252b151196a826c8c1d23d22f20fbad1_720w.jpg?source=1940ef5c" alt="img"></p>
<p><strong>（2）清零某一位：</strong></p>
<p><img src="https://raw.githubusercontent.com/wenjunlichao1231/image_host/main/202205182008499.png" alt="微信截图_20220518200831"></p>
<p>示例：</p>
<p><img src="https://pic1.zhimg.com/80/v2-f0055826218634c6bb29cde53ec9f724_720w.jpg?source=1940ef5c" alt="img"></p>
<p>结果：</p>
<p><img src="https://pic3.zhimg.com/80/v2-fb45d2c856a88780ca5119ef5a413f4e_720w.jpg?source=1940ef5c" alt="img"></p>
<h3 id="3、一个32bit数据的位、字节置1操作"><a href="#3、一个32bit数据的位、字节置1操作" class="headerlink" title="3、一个32bit数据的位、字节置1操作"></a><strong>3、一个32bit数据的位、字节置1操作</strong></h3><p><strong>（1）置某个字节为1：</strong></p>
<p><img src="https://raw.githubusercontent.com/wenjunlichao1231/image_host/main/202205182009843.png" alt="微信截图_20220518200933"></p>
<p>示例：</p>
<p><img src="https://pic2.zhimg.com/80/v2-116d7b0ebb6cf5d5038c88906ced647e_720w.jpg?source=1940ef5c" alt="img"></p>
<p>结果：</p>
<p><img src="https://pic1.zhimg.com/80/v2-50784554281bbe99fe63335a49339265_720w.jpg?source=1940ef5c" alt="img"></p>
<p><strong>（2）置位某一位：</strong></p>
<p><img src="https://raw.githubusercontent.com/wenjunlichao1231/image_host/main/202205182010422.png" alt="微信截图_20220518201027"></p>
<p>示例：</p>
<p><img src="https://pic1.zhimg.com/80/v2-a1755837c51555d2966abc9d94097957_720w.jpg?source=1940ef5c" alt="img"></p>
<p>结果：</p>
<p><img src="https://pic2.zhimg.com/80/v2-3d1894f914522c0cd3578987e2bbd267_720w.jpg?source=1940ef5c" alt="img"></p>
<h3 id="4、判断某一位或某几位连续位的值"><a href="#4、判断某一位或某几位连续位的值" class="headerlink" title="4、判断某一位或某几位连续位的值"></a><strong>4、判断某一位或某几位连续位的值</strong></h3><p><strong>（1）判断某一位的值</strong></p>
<p>举例说明：判断0x68第三位的值</p>
<p><img src="https://pica.zhimg.com/80/v2-f26112bb7b338cef585215259aad4fb5_720w.jpg?source=1940ef5c" alt="img"></p>
<p>结果：</p>
<p><img src="https://pic2.zhimg.com/80/v2-68f711275c7b92c0eb6dcf1eed6fa8c7_720w.jpg?source=1940ef5c" alt="img"></p>
<p>也就是说，要判断第几位的值if里就左移几位，在嵌入式编程里，可通过这样的方式来判断寄存器的状态位是否被置位</p>
<p><strong>（2）判断某几位连续位的值</strong></p>
<p><img src="https://raw.githubusercontent.com/wenjunlichao1231/image_host/main/202205182014965.png" alt="微信截图_20220518201424"></p>
<p>示例：</p>
<p><img src="https://pic3.zhimg.com/80/v2-4394f22e1295fadece437b25d6f28ca6_720w.jpg?source=1940ef5c" alt="img"></p>
<p>结果：</p>
<p><img src="https://raw.githubusercontent.com/wenjunlichao1231/image_host/main/202208021059360.jpg" alt="v2-3100c6675b51b86fdf913753fb41b84b_720w"></p>
<p><img src="https://raw.githubusercontent.com/wenjunlichao1231/image_host/main/202208071035292.png" alt="image-20220807103528006"></p>
]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2022/11/01/oxff%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="oxff的使用"><a href="#oxff的使用" class="headerlink" title="oxff的使用"></a>oxff的使用</h1><h2 id="0xff的作用一"><a href="#0xff的作用一" class="headerlink" title="0xff的作用一"></a>0xff的作用一</h2><p>十六进制0xff的长度是一个字节，即八位，二进制为：1111 1111，那么一个 8bit 数与1111 1111与运算还是这个数本身，<strong>但是一个****16bit</strong> <strong>数与</strong> <strong>0xff****就被截断了，比如</strong> <strong>1100110011001100 &amp; 0xff****结果为</strong> <strong>11001100</strong>。那如果想不被截断怎么办？把0xff扩展为二个字节即：0xffff，那么以此类推，0xffffff,0xffffffff都出来了</p>
<h2 id="0xff的作用二"><a href="#0xff的作用二" class="headerlink" title="0xff的作用二"></a>0xff的作用二</h2><p>java专属，由于java没有unsigned类型，所以为了适应与其他语言二进制通讯时各种数据的一致性，需要做一些处理。</p>
<p>最直观的例子：<strong>int a = -127 &amp; 0xFF ; //</strong> <strong>等同于</strong> <strong>unsigned int c = 129; (<strong><strong>这里的</strong></strong>-127<strong><strong>与</strong></strong>129**<strong>是字节，只为了直观而写的具体数字</strong></strong>)**</p>
<p>这里要严格说明一点：再32位机器上，0xff实际上是 0x00000000 00000000 00000000 11111111，</p>
<p>而-127是 11111111 11111111 11111111 10000001 (补码形式), 那么-127 &amp; 0xff的结果自然是</p>
<p>00000000 00000000 00000000 10000001 即 129.</p>
<p>简而言之，该作用主要是为了将 有符号数转换为无符号数。</p>
<p>将int a转换成字节，一般情况下，int 4字节，那么需要4个byte来保存，又因为java是大端排序，那么byte[0]为最高位，所以需要&gt;&gt;24,这么一个个的把a的4个字节取出存入byte数组中，这里0xff不仅截断，而且还将有符号转换成了无符号。</p>
<p>那么将字节转换回去就不一样了，不是截断而是融合 ，因此需要将&amp; 改为 |，并且还得把每个字节移到所在实际位置，比如byte[0]是最高位，因此还得将其移到4个字节的头部即需要&lt;&lt;24，那么后续得以此类推。一个完成的int32型就出现了。但是由于java的原因，再做位移操作之前还是不能少了有符号转无符号操作</p>
]]></content>
  </entry>
</search>
